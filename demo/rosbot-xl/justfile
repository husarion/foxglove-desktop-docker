set dotenv-load

[private]
default:
    @just --list --unsorted

[private]
alias flash := flash-firmware
[private]
alias rosbot := start-rosbot
[private]
alias foxglove := run-foxglove

# Copy repo content to remote host with 'rsync' and watch for changes
sync hostname="${ROBOT_HOSTNAME}" password="husarion": _install-rsync _run-as-user
    #!/bin/bash
    sshpass -p "{{password}}" rsync -vRr --exclude='.git/' --delete ./ husarion@{{hostname}}:/home/husarion/${PWD##*/}
    while inotifywait -r -e modify,create,delete,move ./ --exclude='.git/' ; do
        sshpass -p "{{password}}" rsync -vRr --exclude='.git/' --delete ./ husarion@{{hostname}}:/home/husarion/${PWD##*/}
    done

# flash the proper firmware for STM32 microcontroller in ROSbot XL
flash-firmware: _run-as-user
    #!/bin/bash
    echo "Stopping all running containers"
    docker ps -q | xargs -r docker stop

    echo "Flashing the firmware for STM32 microcontroller in ROSbot"
    docker run \
        --rm -it \
        --device /dev/ttyUSBDB \
        --device /dev/bus/usb/ \
        $(yq .services.rosbot.image compose.yaml) \
        ros2 run rosbot_xl_utils flash_firmware --port /dev/ttyUSBDB
        # flash-firmware.py -p /dev/ttyUSBDB # todo

# start containers on a physical ROSbot XL
start-rosbot: _run-as-user
    #!/bin/bash
    mkdir -m 775 -p maps
    docker compose down
    docker compose pull
    docker compose up

# run teleop_twist_keybaord (host)
run-foxglove runtime="cpu": _run-as-user
    #!/bin/bash
    if  [[ "{{runtime}}" == "nvidia" ]] ; then
        echo "Docker runtime: nvidia"
        export DOCKER_RUNTIME=nvidia
        export LIBGL_ALWAYS_SOFTWARE=0
    else
        echo "Docker runtime: runc"
        export DOCKER_RUNTIME=runc
        export LIBGL_ALWAYS_SOFTWARE=1
    fi

    xhost +local:docker
    docker compose -f compose.pc.yaml down
    docker compose -f compose.pc.yaml pull
    docker compose -f compose.pc.yaml up

_run-as-user:
    #!/bin/bash
    if [ "$EUID" -eq 0 ]; then
        echo -e "\e[1;33mPlease re-run as non-root user\e[0m"
        exit 1
    fi

_install-rsync:
    #!/bin/bash
    if ! command -v rsync &> /dev/null || ! command -v sshpass &> /dev/null || ! command -v inotifywait &> /dev/null; then
        if [ "$EUID" -ne 0 ]; then
            echo -e "\e[1;33mPlease run as root to install dependencies\e[0m"
            exit 1
        fi
        apt install -y rsync sshpass inotify-tools
    fi

